### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AuthPayload {
  token: String!
  user: User!
}

input CreateOrganizationInput {
  description: String
  name: String!
}

type CreateStraffepilsReturn {
  ok: Boolean
}

type Mutation {
  createOrganization(data: CreateOrganizationInput!): Organization!
  createStraffepils(data: StraffepilsCreateInput!): CreateStraffepilsReturn!
  deleteOrganization(id: Int!): Organization!
  loginUser(data: UserLoginInput!): SignupUserReturn!
  signupUser(data: UserCreateInput!): SignupUserReturn!
  updateOrganization(data: UpdateOrganizationInput!, id: Int!): Organization!
}

type Organization {
  description: String
  id: Int!
  name: String!
  users: [User!]!
}

input OrganizationOrderByInput {
  description: Sort
  name: Sort
}

type Query {
  allOrganizations(
    filterString: String
    orderBy: [OrganizationOrderByInput!]
    skip: Int
    take: Int
  ): [Organization]
  allStraffepils(
    byGiver: Int
    byReceiver: Int
    confirmed: Boolean
    filterString: String
    skip: Int
    take: Int
  ): [Straffepils]
  allUsers(
    filterString: String
    orderBy: [UserOrderByInput!]
    skip: Int
    take: Int
  ): [User]
  isLoggedIn: Boolean!
  me: User
  organization(id: Int!): Organization
  organizationUsers(id: Int!): [User]
  straffepils(id: Int!): Straffepils
  user(id: Int!): User
  userStraffepils(id: Int!): UserStraffepils
}

enum Role {
  ADMIN
  USER
}

type SignupUserReturn {
  token: String
  user: User
}

enum Sort {
  asc
  desc
}

type Straffepils {
  amount: Int!
  confirmed: Boolean
  giver: User!
  giverId: Int!
  id: Int!
  reason: String
  receiver: User!
  receiverId: Int!
}

input StraffepilsCreateInput {
  amount: Int!
  giverId: Int!
  reason: String!
  receiverId: Int!
}

input StraffepilsOrderByInput {
  amount: Sort
  giverId: Sort
  reason: Sort
  receiverId: Sort
}

input StraffepilsUpdateInput {
  amount: Int
  confirmed: Boolean
  giverId: Int
  reason: String
  receiverId: Int
}

input UpdateOrganizationInput {
  description: String
  name: String
}

type User {
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  organization: Organization
  organizationId: Int!
  role: Role!
  straffepils: [Straffepils]
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  organizationId: Int!
  password: String!
  role: Role!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserOrderByInput {
  email: Sort
  firstName: Sort
  lastName: Sort
  organization: Sort
  role: Sort
}

type UserStraffepils {
  straffepils(id: Int!): [Straffepils]!
  straffepilsAmount(id: Int!): Int!
}

input UserUniqueInput {
  email: String
  id: Int
}
