### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

input CreateOrganizationInput {
  description: String
  name: String!
}

type Mutation {
  createOrganization(data: CreateOrganizationInput!): Organization!
  deleteOrganization(id: Int!): Organization!
  loginUser(data: UserLoginInput!): SignupUserReturn!
  signupUser(data: UserCreateInput!): SignupUserReturn!
  updateOrganization(data: UpdateOrganizationInput!, id: Int!): Organization!
}

type Organization {
  description: String
  id: Int!
  name: String!
  users: [User!]!
}

input OrganizationOrderByInput {
  description: Sort
  name: Sort
}

type Query {
  allOrganizations(filterString: String, orderBy: [OrganizationOrderByInput!], skip: Int, take: Int): [Organization]
  allUsers(filterString: String, orderBy: [UserOrderByInput!], skip: Int, take: Int): [User]
  isLoggedIn: Boolean!
  me: User
  organization(id: Int!): Organization
  user(id: Int!): User
}

enum Role {
  ADMIN
  USER
}

type SignupUserReturn {
  token: String
  user: User
}

enum Sort {
  asc
  desc
}

input UpdateOrganizationInput {
  description: String
  name: String
}

type User {
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  organization: Organization
  role: Role!
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  organizationId: Int!
  password: String!
  role: Role!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserOrderByInput {
  email: Sort
  firstName: Sort
  lastName: Sort
  organization: Sort
  role: Sort
}

input UserUniqueInput {
  email: String
  id: Int
}